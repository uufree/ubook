#user nobody;
# 可选auto、n
worker_processes 1;
worker_rlimit_nofile 100000;
daemon off;

error_log /usr/local/nginx/logs/error.log warn;
pid /usr/local/nginx/logs/nginx.pid;

events {
    worker_connections 100000;
}

http {
    # 作为静态资源服务器时，需要打开这个选项
    # gzip on;
    sendfile on;
    include mime.types;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log logs/access.log main;

    # recv request
    client_header_buffer_size 1k;
    client_body_buffer_size 16m;
    client_header_timeout 60s;
    client_body_timeout 60s;
    client_max_body_size 100m;

    # send response
    send_timeout 60s;

    # keep-alive
    # 0意味着关闭长连接
    keepalive_timeout 75s;

    # 自定义DNS服务器地址，主要用于upstream代理域名时
    #resolver 10.0.0.1 valid=300s ipv6=off;
    #resolver_timeout 10s;

    server {
        listen 80 backlog=4096 rcvbuf=1k sndbuf=1k;

        location /hello {
            default_type text/plain;
            content_by_lua_block {
                ngx.say("HelloWorld")
            }
        }

        location /args {
            default_type text/plain;
            content_by_lua_block {
                # 0.0.0.0:80/args?name=uuchen
                ngx.say(ngx.var.arg_name);
            }
        }

        location /request_body {
            default_type text/plain;
            content_by_lua_block {
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                if data then
                    ngx.say("body data: ")
                    ngx.say(data)
                    return
                end
            }
        }

        location /print_req_header {
            default_type text/plain;
            content_by_lua_block {
                local headers, err = ngx.req.get_headers()
                if err == "truncated" then 
                    ngx.say("500, header is truncated")
                    return
                end
                
                for k, v in pairs(headers) do
                    ngx.say(k, ":  ", v)
                end
            }
        }
    }
}