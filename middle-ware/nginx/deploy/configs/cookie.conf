#user nobody;
# 可选auto、n
worker_processes 1;
worker_rlimit_nofile 100000;
daemon off;

error_log  logs/error.log info;
pid        logs/nginx.pid;

events {
    worker_connections 100000;
}

http {
    # 作为静态资源服务器时，需要打开这个选项
    gzip on;
    sendfile on;
    include       mime.types;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  logs/access.log  main;

    # recv request
    client_header_buffer_size 1k;
    client_body_buffer_size 16m;
    client_header_timeout 60s;
    client_body_timeout 60s;
    client_max_body_size 100m;

    # send response
    send_timeout 60s;

    # keep-alive
    # 0意味着关闭长连接
    keepalive_timeout 75s;

    # 自定义DNS服务器地址，主要用于upstream代理域名时
    #resolver 10.0.0.1 valid=300s ipv6=off;
    #resolver_timeout 10s;

    server {
        listen 80;

        location /login {
            default_type text/plain;
            content_by_lua_block {
                -- set cookie
                ngx.header["Set-Cookie"] = "SessionID=1; Max-Age=10; Domain=localhost; Path=/; HttpOnly; SameSite=Strict"
                ngx.say("login success")
            }
        }

        location /ping {
            default_type text/plain;
            content_by_lua_block {
                -- preprocess request header
                local reqhs, err = ngx.req.get_headers()
                if err == "truncated" then 
                    ngx.exit(400)
                end
                
                local sessionID = ''
                for k, v in pairs(reqhs) do 
                    if k == 'cookie' or k == 'Cookie' then
                        ngx.log(ngx.INFO, "request header >> ", k, ": ", v)
                        sessionID = v
                    end
                end

                -- process
                -- parse sessionID
                if sessionID == '' then
                    ngx.status = 400
                    ngx.say("not found session id")
                    return
                end

                -- postprocess response
                -- set sessionID(refresh)
                ngx.header["Set-Cookie"] = sessionID .. "; Max-Age=10; Domain=localhost; Path=/; HttpOnly; SameSite=Strict"
                ngx.say("pong")
            }
        }
    }
}