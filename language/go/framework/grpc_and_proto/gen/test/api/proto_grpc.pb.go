// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearchServiceClient is the client API for SearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchServiceClient interface {
	PostSingleSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	PutSingleSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	GetSingleSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	DeleteSingleSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type searchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchServiceClient(cc grpc.ClientConnInterface) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) PostSingleSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/samples.common.SearchService/PostSingleSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) PutSingleSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/samples.common.SearchService/PutSingleSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetSingleSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/samples.common.SearchService/GetSingleSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteSingleSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/samples.common.SearchService/DeleteSingleSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServiceServer is the server API for SearchService service.
// All implementations must embed UnimplementedSearchServiceServer
// for forward compatibility
type SearchServiceServer interface {
	PostSingleSearch(context.Context, *SearchRequest) (*SearchResponse, error)
	PutSingleSearch(context.Context, *SearchRequest) (*SearchResponse, error)
	GetSingleSearch(context.Context, *SearchRequest) (*SearchResponse, error)
	DeleteSingleSearch(context.Context, *SearchRequest) (*SearchResponse, error)
	mustEmbedUnimplementedSearchServiceServer()
}

// UnimplementedSearchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSearchServiceServer struct {
}

func (UnimplementedSearchServiceServer) PostSingleSearch(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSingleSearch not implemented")
}
func (UnimplementedSearchServiceServer) PutSingleSearch(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSingleSearch not implemented")
}
func (UnimplementedSearchServiceServer) GetSingleSearch(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleSearch not implemented")
}
func (UnimplementedSearchServiceServer) DeleteSingleSearch(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSingleSearch not implemented")
}
func (UnimplementedSearchServiceServer) mustEmbedUnimplementedSearchServiceServer() {}

// UnsafeSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServiceServer will
// result in compilation errors.
type UnsafeSearchServiceServer interface {
	mustEmbedUnimplementedSearchServiceServer()
}

func RegisterSearchServiceServer(s grpc.ServiceRegistrar, srv SearchServiceServer) {
	s.RegisterService(&SearchService_ServiceDesc, srv)
}

func _SearchService_PostSingleSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).PostSingleSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.common.SearchService/PostSingleSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).PostSingleSearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_PutSingleSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).PutSingleSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.common.SearchService/PutSingleSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).PutSingleSearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetSingleSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetSingleSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.common.SearchService/GetSingleSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetSingleSearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteSingleSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteSingleSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.common.SearchService/DeleteSingleSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteSingleSearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchService_ServiceDesc is the grpc.ServiceDesc for SearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "samples.common.SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostSingleSearch",
			Handler:    _SearchService_PostSingleSearch_Handler,
		},
		{
			MethodName: "PutSingleSearch",
			Handler:    _SearchService_PutSingleSearch_Handler,
		},
		{
			MethodName: "GetSingleSearch",
			Handler:    _SearchService_GetSingleSearch_Handler,
		},
		{
			MethodName: "DeleteSingleSearch",
			Handler:    _SearchService_DeleteSingleSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}

// StreamSearchServiceClient is the client API for StreamSearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamSearchServiceClient interface {
	FrontStreamSearch(ctx context.Context, opts ...grpc.CallOption) (StreamSearchService_FrontStreamSearchClient, error)
	BackStreamSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (StreamSearchService_BackStreamSearchClient, error)
	BatchStreamSearch(ctx context.Context, opts ...grpc.CallOption) (StreamSearchService_BatchStreamSearchClient, error)
}

type streamSearchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamSearchServiceClient(cc grpc.ClientConnInterface) StreamSearchServiceClient {
	return &streamSearchServiceClient{cc}
}

func (c *streamSearchServiceClient) FrontStreamSearch(ctx context.Context, opts ...grpc.CallOption) (StreamSearchService_FrontStreamSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamSearchService_ServiceDesc.Streams[0], "/samples.common.StreamSearchService/FrontStreamSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamSearchServiceFrontStreamSearchClient{stream}
	return x, nil
}

type StreamSearchService_FrontStreamSearchClient interface {
	Send(*SearchRequest) error
	CloseAndRecv() (*SearchResponse, error)
	grpc.ClientStream
}

type streamSearchServiceFrontStreamSearchClient struct {
	grpc.ClientStream
}

func (x *streamSearchServiceFrontStreamSearchClient) Send(m *SearchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamSearchServiceFrontStreamSearchClient) CloseAndRecv() (*SearchResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamSearchServiceClient) BackStreamSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (StreamSearchService_BackStreamSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamSearchService_ServiceDesc.Streams[1], "/samples.common.StreamSearchService/BackStreamSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamSearchServiceBackStreamSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamSearchService_BackStreamSearchClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type streamSearchServiceBackStreamSearchClient struct {
	grpc.ClientStream
}

func (x *streamSearchServiceBackStreamSearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamSearchServiceClient) BatchStreamSearch(ctx context.Context, opts ...grpc.CallOption) (StreamSearchService_BatchStreamSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamSearchService_ServiceDesc.Streams[2], "/samples.common.StreamSearchService/BatchStreamSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamSearchServiceBatchStreamSearchClient{stream}
	return x, nil
}

type StreamSearchService_BatchStreamSearchClient interface {
	Send(*SearchRequest) error
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type streamSearchServiceBatchStreamSearchClient struct {
	grpc.ClientStream
}

func (x *streamSearchServiceBatchStreamSearchClient) Send(m *SearchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamSearchServiceBatchStreamSearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamSearchServiceServer is the server API for StreamSearchService service.
// All implementations must embed UnimplementedStreamSearchServiceServer
// for forward compatibility
type StreamSearchServiceServer interface {
	FrontStreamSearch(StreamSearchService_FrontStreamSearchServer) error
	BackStreamSearch(*SearchRequest, StreamSearchService_BackStreamSearchServer) error
	BatchStreamSearch(StreamSearchService_BatchStreamSearchServer) error
	mustEmbedUnimplementedStreamSearchServiceServer()
}

// UnimplementedStreamSearchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamSearchServiceServer struct {
}

func (UnimplementedStreamSearchServiceServer) FrontStreamSearch(StreamSearchService_FrontStreamSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method FrontStreamSearch not implemented")
}
func (UnimplementedStreamSearchServiceServer) BackStreamSearch(*SearchRequest, StreamSearchService_BackStreamSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method BackStreamSearch not implemented")
}
func (UnimplementedStreamSearchServiceServer) BatchStreamSearch(StreamSearchService_BatchStreamSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchStreamSearch not implemented")
}
func (UnimplementedStreamSearchServiceServer) mustEmbedUnimplementedStreamSearchServiceServer() {}

// UnsafeStreamSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamSearchServiceServer will
// result in compilation errors.
type UnsafeStreamSearchServiceServer interface {
	mustEmbedUnimplementedStreamSearchServiceServer()
}

func RegisterStreamSearchServiceServer(s grpc.ServiceRegistrar, srv StreamSearchServiceServer) {
	s.RegisterService(&StreamSearchService_ServiceDesc, srv)
}

func _StreamSearchService_FrontStreamSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamSearchServiceServer).FrontStreamSearch(&streamSearchServiceFrontStreamSearchServer{stream})
}

type StreamSearchService_FrontStreamSearchServer interface {
	SendAndClose(*SearchResponse) error
	Recv() (*SearchRequest, error)
	grpc.ServerStream
}

type streamSearchServiceFrontStreamSearchServer struct {
	grpc.ServerStream
}

func (x *streamSearchServiceFrontStreamSearchServer) SendAndClose(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamSearchServiceFrontStreamSearchServer) Recv() (*SearchRequest, error) {
	m := new(SearchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamSearchService_BackStreamSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamSearchServiceServer).BackStreamSearch(m, &streamSearchServiceBackStreamSearchServer{stream})
}

type StreamSearchService_BackStreamSearchServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type streamSearchServiceBackStreamSearchServer struct {
	grpc.ServerStream
}

func (x *streamSearchServiceBackStreamSearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamSearchService_BatchStreamSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamSearchServiceServer).BatchStreamSearch(&streamSearchServiceBatchStreamSearchServer{stream})
}

type StreamSearchService_BatchStreamSearchServer interface {
	Send(*SearchResponse) error
	Recv() (*SearchRequest, error)
	grpc.ServerStream
}

type streamSearchServiceBatchStreamSearchServer struct {
	grpc.ServerStream
}

func (x *streamSearchServiceBatchStreamSearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamSearchServiceBatchStreamSearchServer) Recv() (*SearchRequest, error) {
	m := new(SearchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamSearchService_ServiceDesc is the grpc.ServiceDesc for StreamSearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamSearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "samples.common.StreamSearchService",
	HandlerType: (*StreamSearchServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FrontStreamSearch",
			Handler:       _StreamSearchService_FrontStreamSearch_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BackStreamSearch",
			Handler:       _StreamSearchService_BackStreamSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BatchStreamSearch",
			Handler:       _StreamSearchService_BatchStreamSearch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto.proto",
}
